import java.util.*;

public class EpidemiologyDiseaseSpreadControl{
    static class Edge{
        int src;
        int dst;
        public  Edge(int s, int d){
            this.src = s;
            this.dst = d;
        }
    }

    public static void creatingAGraphForAreas( ArrayList<Edge> graph[]){

        //Initialize each ArrayList in the array
        for(int i=0; i<graph.length; i++){
            graph[i]= new ArrayList<Edge>();
        }
        //Manually add interaction between areas (edges) to the graph
        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));

        graph[1].add(new Edge(1, 2));

        graph[2].add(new Edge(2, 3));
        graph[2].add(new Edge(2, 5));

        graph[3].add(new Edge(3, 4));

        graph[4].add(new Edge(4, 5));
        graph[4].add(new Edge(4, 6));

        graph[6].add(new Edge(6, 6));
        graph[7].add(new Edge(7, 7));

        graph[8].add(new Edge(8, 8));
        graph[9].add(new Edge(9, 0));

    }

    //Using Depth First Search algorithm to traverse through all areas
    public static void dfs(ArrayList<Edge> graph[], int curr, boolean vis[], int dt[], int low[], int time, int par, boolean ap[]){

        vis[curr]= true; //Once a area is visited, we mark it True
        dt[curr]=low[curr]= ++time; //// To keep track of discovery times of visited vertices
        int children = 0;
      //Once a area is visited, we are trying to get the neighbours
        for(int i=0; i< graph[curr].size();i++){
            Edge e = graph[curr].get(i);
      //Three possible conditions for a neighbour
            if(e.dst == par){
                continue; //Since we can conclude if neighbour is a AP or not just it being a Parent
            }else if(!vis[e.dst]){
                dfs(graph, e.dst, vis, dt, low, time, curr, ap); // recursive
                low[curr]= Math.min(low[curr],low[e.dst]); //once dfs is done, update Lowest discovery time 
                if(dt[curr]<= low[e.dst] && par != -1){ // We can get AP only when a Location is not visited, hence we check the AP condition here, if it was visited already, then obviously it is not a AP
                    ap[curr]= true;
                }
                children++;//Once the DFS is done, we consider the whole cycle as one child
            }
            else{ //If the node is already visited, this shows it was discovered earlier
                low[curr]= Math.min(low[curr],dt[e.dst]);
            }
        }
//After DFS is performed for all the vertices, we check second condition for AP
        if(par == -1 && children > 1){
            ap[curr]= true;
        }
    }

    // Function to find and print articulation points using DFS
    public static void getAp(ArrayList<Edge> graph[], int V){
        int dt[]= new int[V]; //discovery time
        int low[] = new int[V]; //Lowest discovery time
        int time = 0; // intialize time
        boolean vis[] = new boolean[V]; //To track visited locations
        boolean ap[] = new boolean[V]; //To get Articulation points 

        for (int i=0; i< V; i++){//disconnected graphs
            if(!vis[i]){
                dfs(graph, i, vis, dt, low, time, -1, ap);
            }
        }
        System.out.println("Prioritize Vaccinations, Testing, In Worst case- Quarantine below Locations");
        for (int i=0; i< V; i++){
            if(ap[i]){
                // Print articulation points
                System.out.println("Critical Location:"+ i);

            }
        }
    }

    public static void findSuperSpreaders( ArrayList<Edge> graph[], int[] population){

        int thresholdPopulation = 50000; // Hypothetical population threshold
        int thresholdDegree = 1; // Hypothetical degree threshold
        for (int i = 0; i < graph.length; i++) {
            int degree = graph[i].size();
            if (population[i] > thresholdPopulation && degree > thresholdDegree) {
                System.out.println("Potential super spreader area: " + i + " with population: " + population[i] + " and degree: " + degree);
            }
        }


    }


    public static void main(String args[]){
        // Define the number of unique areas (nodes)
        int V = 10; // Adjust based on the actual number of unique areas

        // Create an array of ArrayLists for the graph
        ArrayList<Edge> graph[] = new ArrayList[V];
        //Population for each area
        int[] population = {45000, 40000, 50000, 55000, 60000, 35000, 70000, 65000, 80000, 30000};

        creatingAGraphForAreas(graph);
        getAp(graph, V);
        findSuperSpreaders(graph, population);

    }
}

